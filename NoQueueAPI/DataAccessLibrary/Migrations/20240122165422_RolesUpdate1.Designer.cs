// <auto-generated />
using System;
using DataAccessLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(NoQContext))]
    [Migration("20240122165422_RolesUpdate1")]
    partial class RolesUpdate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLibrary.Models.BankDetail", b =>
                {
                    b.Property<int>("BankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankDetailId"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankBranch")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ifsccode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IFSCCode");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDefaultAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BankDetailId")
                        .HasName("PK__BankDeta__1741077C4891BB23");

                    b.HasIndex("BranchId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("Address")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsRegisteredVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longtitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MapLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherCity")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StatusUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BranchId")
                        .HasName("PK__Branch__A1682FC50514ABA4");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.HasIndex("Status");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchOrders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.ToTable("BranchOrders", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsCoverPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Sequenct")
                        .HasColumnType("int");

                    b.HasKey("PhotoId")
                        .HasName("PK__BranchPh__21B7B5E2147221A7");

                    b.HasIndex("BranchId");

                    b.HasIndex("PhotoCategoryId");

                    b.ToTable("BranchPhotos");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchStaff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsRegisteredVerified")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("BranchStaff", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchTables", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsTakeAway")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableQrPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableQrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchTables", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DicountAmount")
                        .HasColumnType("money");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Longtitude")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OtherCharge")
                        .HasColumnType("money");

                    b.Property<decimal?>("PayAmount")
                        .HasColumnType("money");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("money");

                    b.Property<string>("TaxDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("money");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD7B7D66C81B3");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.HasKey("CartItemId")
                        .HasName("PK__CartItem__488B0B0AAD40516B");

                    b.HasIndex("CartId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CartOtherCharge", b =>
                {
                    b.Property<int>("OtherChargesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherChargesId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OtherChargesId")
                        .HasName("PK__CartOthe__D1D79040608E1FB7");

                    b.HasIndex("CartId");

                    b.ToTable("CartOtherCharges");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CategoryMaster", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A0B826BA9A6");

                    b.ToTable("CategoryMaster", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryCode = "r",
                            CategoryName = "Restaurants",
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryCode = "h",
                            CategoryName = "Hotel",
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CityMaster", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CityId")
                        .HasName("PK__CityMast__F2D21B76E2F732FD");

                    b.HasIndex("DistrictId");

                    b.ToTable("CityMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CompanyMaster", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsRegisteredVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StatusUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyId")
                        .HasName("PK__CompanyM__2D971CAC123AB7DF");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Status");

                    b.ToTable("CompanyMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CountryMaster", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CountryId")
                        .HasName("PK__CountryM__10D1609F7534E1FE");

                    b.ToTable("CountryMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DeviceNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActivated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsRegisteredVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64D8A5DD4C7F");

                    b.HasIndex("BranchId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<decimal?>("AmountLimit")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<int?>("FoodSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("MaxDiscountValue")
                        .HasColumnType("money");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTill")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Value")
                        .HasColumnType("money");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6D96AC73EFDD");

                    b.HasIndex("BranchId");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("FoodSubCategoryId");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.DistrictMaster", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("DistrictId")
                        .HasName("PK__District__85FDA4C61A2A8A0B");

                    b.HasIndex("StateId");

                    b.ToTable("DistrictMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.ErrorHandling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorHandlings");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodCategory", b =>
                {
                    b.Property<int>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodCategoryId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FoodCategoryImage")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FoodCategoryId")
                        .HasName("PK__FoodCate__5451B7EB2C0261CF");

                    b.HasIndex("BranchId");

                    b.ToTable("FoodCategory", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodItem", b =>
                {
                    b.Property<int>("FoodItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodItemId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FoodImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FoodSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsNonVeg")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.HasKey("FoodItemId")
                        .HasName("PK__FoodItem__464DC81232ED13C2");

                    b.HasIndex("BranchId");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("FoodSubCategoryId");

                    b.ToTable("FoodItem", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodSubCategory", b =>
                {
                    b.Property<int>("FoodSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodSubCategoryId"));

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FoodSubCategoryImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FoodSubCategoryId")
                        .HasName("PK__FoodSubC__F70A849453AFCD2E");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("FoodSubCategory", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.PhotoCategoryMaster", b =>
                {
                    b.Property<int>("PhotoCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("PhotoCategoryId")
                        .HasName("PK__PhotoCat__7F61C6CBDF239D07");

                    b.ToTable("PhotoCategoryMaster", (string)null);

                    b.HasData(
                        new
                        {
                            PhotoCategoryId = 1,
                            CategoryName = "Branch",
                            CreatedDate = new DateTime(2024, 1, 22, 22, 24, 22, 507, DateTimeKind.Local).AddTicks(2279),
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DataAccessLibrary.Models.ProfileMaster", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProfileCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProfileId")
                        .HasName("PK__ProfileM__290C88E40BCD16AB");

                    b.ToTable("ProfileMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Qrdetail", b =>
                {
                    b.Property<int>("QrdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QRDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QrdetailId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Qrcode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("QRCode");

                    b.Property<int?>("TableNo")
                        .HasColumnType("int");

                    b.HasKey("QrdetailId")
                        .HasName("PK__QRDetail__1C89A782B6529F1D");

                    b.HasIndex("BranchId");

                    b.ToTable("QRDetails", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.StateMaster", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StateId")
                        .HasName("PK__StateMas__C3BA3B3A838637A0");

                    b.HasIndex("CountryId");

                    b.ToTable("StateMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.StatusMaster", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__StatusMa__C8EE2063715A1DE4");

                    b.ToTable("StatusMaster", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Active"
                        },
                        new
                        {
                            StatusId = 2,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "InActive"
                        },
                        new
                        {
                            StatusId = 3,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Completed"
                        },
                        new
                        {
                            StatusId = 4,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Processing"
                        },
                        new
                        {
                            StatusId = 5,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "On Hold"
                        },
                        new
                        {
                            StatusId = 6,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Pending"
                        },
                        new
                        {
                            StatusId = 7,
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Accepted"
                        });
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionResponse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.UserData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.UserMaster", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pwd")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__UserMast__1788CC4CCBE0B6A6");

                    b.HasIndex("BranchId");

                    b.ToTable("UserMaster", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.UserProfileLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("LinkId")
                        .HasName("PK__UserProf__2D12213582F8E6BF");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfileLink", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5826d287-6d2e-49ad-90f0-e7dcc106c6a1",
                            ConcurrencyStamp = "1",
                            Name = "CompanyAdmin",
                            NormalizedName = "CompanyAdmin"
                        },
                        new
                        {
                            Id = "02437453-ed91-4099-81b7-139c5d586d42",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "b0aa9909-02ff-415f-9477-c32d91bec929",
                            ConcurrencyStamp = "3",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "6ec23172-62f9-442c-a2c7-82b86bfd853b",
                            ConcurrencyStamp = "4",
                            Name = "Branch Head",
                            NormalizedName = "BranchHead"
                        },
                        new
                        {
                            Id = "e4f20cca-ad5d-49b7-bade-78380f8eda81",
                            ConcurrencyStamp = "5",
                            Name = "Cashier",
                            NormalizedName = "Cashier"
                        },
                        new
                        {
                            Id = "7225fc75-59b7-46e7-90b5-ffaae2e7fe76",
                            ConcurrencyStamp = "6",
                            Name = "Kitchen Supervisor",
                            NormalizedName = "KitchenSupervisor"
                        },
                        new
                        {
                            Id = "398948e3-e5cf-4f7e-adcc-b6ccd6215a98",
                            ConcurrencyStamp = "7",
                            Name = "Steward",
                            NormalizedName = "Steward"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BankDetail", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("BankDetails")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__BankDetai__Branc__3E52440B");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Branch", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.CityMaster", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Branch__CityId__2D27B809");

                    b.HasOne("DataAccessLibrary.Models.CompanyMaster", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__Branch__CompanyI__2C3393D0");

                    b.HasOne("DataAccessLibrary.Models.CountryMaster", "Country")
                        .WithMany("Branches")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Branch__CountryI__300424B4");

                    b.HasOne("DataAccessLibrary.Models.DistrictMaster", "District")
                        .WithMany("Branches")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Branch__District__2E1BDC42");

                    b.HasOne("DataAccessLibrary.Models.StateMaster", "State")
                        .WithMany("Branches")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Branch__StateId__2F10007B");

                    b.HasOne("DataAccessLibrary.Models.StatusMaster", "StatusNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK__Branch__Status__30F848ED");

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("State");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchOrders", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("DataAccessLibrary.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("DataAccessLibrary.Models.StatusMaster", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Cart");

                    b.Navigation("Customer");

                    b.Navigation("Status");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchPhoto", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("BranchPhotos")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__BranchPho__Branc__38996AB5");

                    b.HasOne("DataAccessLibrary.Models.PhotoCategoryMaster", "PhotoCategory")
                        .WithMany("BranchPhotos")
                        .HasForeignKey("PhotoCategoryId")
                        .HasConstraintName("FK__BranchPho__Photo__398D8EEE");

                    b.Navigation("Branch");

                    b.Navigation("PhotoCategory");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchStaff", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.CompanyMaster", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.BranchTables", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Cart", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("Carts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Cart__BranchId__693CA210");

                    b.HasOne("DataAccessLibrary.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CartItem", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__CartItems__CartI__6EF57B66");

                    b.HasOne("DataAccessLibrary.Models.FoodItem", "FoodItem")
                        .WithMany("CartItems")
                        .HasForeignKey("FoodItemId")
                        .HasConstraintName("FK__CartItems__FoodI__6FE99F9F");

                    b.Navigation("Cart");

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CartOtherCharge", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Cart", "Cart")
                        .WithMany("CartOtherCharges")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__CartOther__CartI__6C190EBB");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CityMaster", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.DistrictMaster", "District")
                        .WithMany("CityMasters")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK__CityMaste__Distr__1B0907CE");

                    b.Navigation("District");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CompanyMaster", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.CategoryMaster", "Category")
                        .WithMany("CompanyMasters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CompanyMa__Categ__276EDEB3");

                    b.HasOne("DataAccessLibrary.Models.StatusMaster", "StatusNavigation")
                        .WithMany("CompanyMasters")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK__CompanyMa__Statu__286302EC");

                    b.Navigation("Category");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Customer", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("Customers")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Customer__Branch__6477ECF3");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Discount", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("Discounts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Discount__Branch__5535A963");

                    b.HasOne("DataAccessLibrary.Models.FoodCategory", "FoodCategory")
                        .WithMany("Discounts")
                        .HasForeignKey("FoodCategoryId")
                        .HasConstraintName("FK__Discount__FoodCa__571DF1D5");

                    b.HasOne("DataAccessLibrary.Models.FoodItem", "FoodItem")
                        .WithMany("Discounts")
                        .HasForeignKey("FoodItemId")
                        .HasConstraintName("FK__Discount__FoodIt__5629CD9C");

                    b.HasOne("DataAccessLibrary.Models.FoodSubCategory", "FoodSubCategory")
                        .WithMany("Discounts")
                        .HasForeignKey("FoodSubCategoryId")
                        .HasConstraintName("FK__Discount__FoodSu__5812160E");

                    b.Navigation("Branch");

                    b.Navigation("FoodCategory");

                    b.Navigation("FoodItem");

                    b.Navigation("FoodSubCategory");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.DistrictMaster", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.StateMaster", "State")
                        .WithMany("DistrictMasters")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK__DistrictM__State__173876EA");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodCategory", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("FoodCategories")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__FoodCateg__Branc__47DBAE45");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodItem", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("FoodItems")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__FoodItem__Branch__4F7CD00D");

                    b.HasOne("DataAccessLibrary.Models.FoodCategory", "FoodCategory")
                        .WithMany("FoodItems")
                        .HasForeignKey("FoodCategoryId")
                        .HasConstraintName("FK__FoodItem__FoodCa__5070F446");

                    b.HasOne("DataAccessLibrary.Models.FoodSubCategory", "FoodSubCategory")
                        .WithMany("FoodItems")
                        .HasForeignKey("FoodSubCategoryId")
                        .HasConstraintName("FK__FoodItem__FoodSu__5165187F");

                    b.Navigation("Branch");

                    b.Navigation("FoodCategory");

                    b.Navigation("FoodSubCategory");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodSubCategory", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.FoodCategory", "FoodCategory")
                        .WithMany("FoodSubCategories")
                        .HasForeignKey("FoodCategoryId")
                        .HasConstraintName("FK__FoodSubCa__FoodC__4BAC3F29");

                    b.Navigation("FoodCategory");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Qrdetail", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("Qrdetails")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__QRDetails__Branc__440B1D61");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.StateMaster", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.CountryMaster", "Country")
                        .WithMany("StateMasters")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__StateMast__Count__1367E606");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Transaction", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("Transactions")
                        .HasForeignKey("BranchId");

                    b.HasOne("DataAccessLibrary.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("DataAccessLibrary.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Branch");

                    b.Navigation("Cart");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.UserMaster", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Branch", "Branch")
                        .WithMany("UserMasters")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__UserMaste__Branc__5BE2A6F2");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.UserProfileLink", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.ProfileMaster", "Profile")
                        .WithMany("UserProfileLinks")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK__UserProfi__Profi__5FB337D6");

                    b.HasOne("DataAccessLibrary.Models.UserMaster", "User")
                        .WithMany("UserProfileLinks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserProfi__UserI__60A75C0F");

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Branch", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("BranchPhotos");

                    b.Navigation("Carts");

                    b.Navigation("Customers");

                    b.Navigation("Discounts");

                    b.Navigation("FoodCategories");

                    b.Navigation("FoodItems");

                    b.Navigation("Qrdetails");

                    b.Navigation("Transactions");

                    b.Navigation("UserMasters");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("CartOtherCharges");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CategoryMaster", b =>
                {
                    b.Navigation("CompanyMasters");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CityMaster", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CompanyMaster", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.CountryMaster", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("StateMasters");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Customer", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.DistrictMaster", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("CityMasters");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodCategory", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("FoodItems");

                    b.Navigation("FoodSubCategories");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodItem", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.FoodSubCategory", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("FoodItems");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.PhotoCategoryMaster", b =>
                {
                    b.Navigation("BranchPhotos");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.ProfileMaster", b =>
                {
                    b.Navigation("UserProfileLinks");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.StateMaster", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("DistrictMasters");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.StatusMaster", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("CompanyMasters");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.UserMaster", b =>
                {
                    b.Navigation("UserProfileLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
